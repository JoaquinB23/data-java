ğŸ“˜ Resumen: Herencia en Java
ğŸ”¹ Â¿QuÃ© es la herencia?

La herencia es un mecanismo de la POO que permite que una clase (subclase o hija) reutilice atributos y mÃ©todos de otra clase (superclase o padre).

Facilita la reutilizaciÃ³n de cÃ³digo, la organizaciÃ³n y el polimorfismo.


ğŸ”¹ Sintaxis bÃ¡sica
class Superclase {
    String nombre;

    void saludar() {
        System.out.println("Hola, soy la superclase");
    }
}

// Subclase hereda de Superclase
class Subclase extends Superclase {
    void presentarse() {
        System.out.println("Soy una subclase, y mi nombre es " + nombre);
    }
}

public class Main {
    public static void main(String[] args) {
        Subclase obj = new Subclase();
        obj.nombre = "Ana";      // atributo heredado
        obj.saludar();           // mÃ©todo heredado
        obj.presentarse();       // mÃ©todo propio
    }
}


ğŸ‘‰ Salida:

Hola, soy la superclase
Soy una subclase, y mi nombre es Ana



ğŸ”¹ Palabras clave importantes

extends â†’ indica que una clase hereda de otra.

super â†’ permite acceder a mÃ©todos/atributos de la superclase o invocar su constructor.

Herencia simple en Java: una clase solo puede heredar de una Ãºnica superclase (Java no admite herencia mÃºltiple de clases, pero sÃ­ de interfaces).


ğŸ”¹ Tipos de herencia

Simple â†’ una clase hereda de otra.

JerÃ¡rquica â†’ varias clases heredan de una misma clase padre.

MÃºltiple (solo mediante interfaces).

ğŸ”¹ Beneficios

âœ… ReutilizaciÃ³n de cÃ³digo.
âœ… Permite el polimorfismo dinÃ¡mico (una referencia padre puede apuntar a un objeto hijo).
âœ… Facilita la extensibilidad y mantenibilidad del cÃ³digo.

âœ… Resumen 

La herencia en Java permite que una clase (subclase) herede atributos y mÃ©todos de otra (superclase) usando la palabra clave extends. Solo se admite herencia simple, pero una clase puede implementar mÃºltiples interfaces.