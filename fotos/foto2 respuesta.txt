## **Pregunta 1: Sobrescribir `toString` en Estudiantes**

CÃ³digo:

```java
@Override
public String toString() {
    return super.toString() + " - Carrera: " + this.carrera;
}
```

ğŸ“Œ AnÃ¡lisis:

* `super.toString()` llama al mÃ©todo `toString` de la clase padre (`Persona`).
* Se aÃ±ade mÃ¡s informaciÃ³n (`" - Carrera: ..."`).
* Esto **no oculta** ni **sobrecarga**: lo que hace es **sobrescribir** el mÃ©todo `toString` heredado de `Object` (ya modificado en `Persona`) y extender su funcionalidad.

âœ… **Respuesta correcta:**
ğŸ‘‰ **Se reemplaza el comportamiento de toString de Persona, pero usando tambiÃ©n el de Persona a travÃ©s de super.toString().**

---

## **Pregunta 2: Atributo `private`**

CÃ³digo:

```java
private String color;
```

ğŸ“Œ AnÃ¡lisis:

* `private` significa que **solo es accesible dentro de la misma clase**.
* No se puede acceder directamente desde fuera, ni siquiera desde subclases.
* Generalmente se accede mediante **getters/setters**.

âœ… **Respuesta correcta:**
ğŸ‘‰ **Que solo se puede acceder a color dentro de la clase Auto.**

---

### ğŸš€ Resumen de respuestas:

1. **Se reemplaza el comportamiento de toString de Persona, pero usando tambiÃ©n el de Persona a travÃ©s de super.toString().**
2. **Que solo se puede acceder a color dentro de la clase Auto.**

---


