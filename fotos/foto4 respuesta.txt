### üîë Recordemos:

* **Encapsulamiento**: los atributos se marcan `private` y se acceden solo a trav√©s de **m√©todos p√∫blicos** (`get`/`set`), lo que protege los datos sensibles y permite control en su acceso.
* Violaci√≥n = exponer directamente atributos internos sin mediaci√≥n.
* Compromiso de datos sensibles = cuando se permite modificaci√≥n sin control.

---

### Opciones:

1. **Declarar un atributo clave de la ClaseC (ej. private String id;) y proporcionar solo el m√©todo public String getId() (getter), sin implementar el public void setId(String id) (setter).**

   * Aqu√≠ el atributo sigue siendo `private`.
   * Solo se da lectura, no modificaci√≥n.
     ‚úÖ Esto **respeta el encapsulamiento**, incluso aumenta seguridad (atributo inmutable).

---

2. **Declarar el atributo size de la ClaseC como public int size; permitiendo que otras clases lo accedan y modifiquen directamente sin pasar por m√©todos.**

   * Esto es **exactamente lo que rompe el encapsulamiento**, porque se expone directamente el atributo y cualquier clase puede leer/modificarlo sin control.
     ‚ùå **Viola directamente el principio de encapsulamiento.**

---

3. **Implementar el m√©todo public void setSize(int newSize) de la ClaseC, pero incluir dentro de √©l una l√≥gica de validaci√≥n que lanza una excepci√≥n si newSize es menor que cero.**

   * Aqu√≠ se protege el acceso mediante un **setter controlado**, que valida antes de asignar.
     ‚úÖ Esto **respeta y fortalece el encapsulamiento** (control de integridad de datos).

---

4. **Crear una interfaz IComponente que defina los m√©todos getSize() y setSize(int) y hacer que la ClaseC implemente esta interfaz.**

   * Esto sigue usando m√©todos p√∫blicos, mantiene el atributo `private`.
   * Solo a√±ade un contrato claro para acceso.
     ‚úÖ **No rompe encapsulamiento**, lo mantiene.

---

### üìå Conclusi√≥n:

La decisi√≥n de dise√±o que **viola el principio de encapsulamiento** es:

üëâ **Opci√≥n 2: Declarar el atributo size como public int size;**

Todas las dem√°s (1, 3, 4) **respetan el encapsulamiento** y no comprometen los datos sensibles.

---


