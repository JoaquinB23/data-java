üîπ ¬øQu√© es la abstracci√≥n?

Es el principio de ocultar los detalles internos de un objeto y mostrar solo lo esencial.

Se enfoca en el qu√© hace un objeto, no en c√≥mo lo hace.

Permite trabajar con conceptos generales sin preocuparse por la implementaci√≥n concreta.

üîπ Formas de aplicar abstracci√≥n en Java

Clases abstractas

Usan la palabra clave abstract.

Pueden tener m√©todos abstractos (sin cuerpo) y m√©todos normales.

No se pueden instanciar.

EJEMPLO:
abstract class Figura {
    abstract double calcularArea(); // m√©todo abstracto
}


Interfaces

Definen un contrato de m√©todos que una clase debe implementar.

Una clase puede implementar varias interfaces.
EJEMPLO: 
interface Dibujable {
    void dibujar();
}


üîπEJEMPLO PRACTICO:
abstract class Vehiculo {
    abstract void mover(); // cada veh√≠culo se mover√° distinto
}

class Auto extends Vehiculo {
    @Override
    void mover() {
        System.out.println("El auto se mueve por carretera");
    }
}

class Avion extends Vehiculo {
    @Override
    void mover() {
        System.out.println("El avi√≥n vuela en el aire");
    }
}

public class Main {
    public static void main(String[] args) {
        Vehiculo v1 = new Auto();
        Vehiculo v2 = new Avion();
        v1.mover(); // "El auto se mueve por carretera"
        v2.mover(); // "El avi√≥n vuela en el aire"
    }
}



üîπ Beneficios de la abstracci√≥n

Reduce la complejidad del sistema.

Facilita la reutilizaci√≥n y el mantenimiento.

Permite programar ‚Äúa un nivel alto‚Äù sin depender de implementaciones concretas.

