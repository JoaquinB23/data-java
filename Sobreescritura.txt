Sobreescritura

ğŸ”¹ Â¿QuÃ© es la sobreescritura?

La sobreescritura es una caracterÃ­stica de la herencia en Java que permite que una subclase redefina el comportamiento de un mÃ©todo heredado de su superclase.

ğŸ‘‰ En otras palabras:

La subclase toma un mÃ©todo existente y le da su propia implementaciÃ³n.

El nombre, los parÃ¡metros y el tipo de retorno deben ser los mismos que en el mÃ©todo de la superclase.

ğŸ”¹ Reglas de la sobreescritura

Mismo nombre, parÃ¡metros y tipo de retorno.

El mÃ©todo de la subclase no puede tener un nivel de acceso mÃ¡s restrictivo.

Ej: si en la superclase es public, en la subclase no puede ser private.

Se puede usar la anotaciÃ³n @Override (recomendado) para indicar que se estÃ¡ sobrescribiendo.

El mÃ©todo de la subclase puede lanzar menos excepciones, pero no mÃ¡s.

ğŸ”¹ Ejemplo bÃ¡sico
class Animal {
    void hacerSonido() {
        System.out.println("El animal hace un sonido");
    }
}

class Perro extends Animal {
    @Override
    void hacerSonido() {
        System.out.println("El perro ladra: Guau guau!");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal a = new Animal();
        a.hacerSonido(); // El animal hace un sonido

        Animal p = new Perro();
        p.hacerSonido(); // El perro ladra: Guau guau!
    }
}


ğŸ‘‰ Fijate que aunque la variable es de tipo Animal, se ejecuta el mÃ©todo de Perro.
Eso se llama polimorfismo dinÃ¡mico.

ğŸ”¹ Diferencia entre sobrecarga (overloading) y sobreescritura (overriding)
CaracterÃ­stica	Sobrecarga (Overloading)	Sobreescritura (Overriding)
Clase	En la misma clase o subclase	Siempre en subclase
MÃ©todos	Mismo nombre, distintos parÃ¡metros	Mismo nombre, mismos parÃ¡metros
Tipo de retorno	Puede cambiar	Debe ser igual o compatible
En tiempo	Se resuelve en compilaciÃ³n	Se resuelve en ejecuciÃ³n