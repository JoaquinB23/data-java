ðŸ”¹ Â¿QuÃ© es una colecciÃ³n?

Una colecciÃ³n es un contenedor de objetos que permite almacenarlos, manipularlos y recorrerlos.

Se agrupan en el framework de colecciones de Java (Java Collections Framework â€“ JCF).

Viven en el paquete java.util.

ðŸ”¹ JerarquÃ­a principal

Collection â†’ interfaz base de la mayorÃ­a de colecciones.

MÃ©todos comunes: add(), remove(), size(), isEmpty(), iterator().

Subinterfaces mÃ¡s importantes:

List â†’ colecciones ordenadas, admiten elementos duplicados.

Implementaciones: ArrayList, LinkedList, Vector.

Set â†’ no permite duplicados.

Implementaciones: HashSet, TreeSet, LinkedHashSet.

Queue / Deque â†’ estructura FIFO o doble cola.

Implementaciones: PriorityQueue, ArrayDeque.

Map (no hereda de Collection) â†’ almacena pares clave-valor.

Implementaciones: HashMap, TreeMap, LinkedHashMap.


ðŸ”¹ Ejemplo con List
import java.util.*;

public class EjemploList {
    public static void main(String[] args) {
        List<String> nombres = new ArrayList<>();
        nombres.add("Ana");
        nombres.add("Luis");
        nombres.add("Ana"); // admite duplicados

        for (String n : nombres) {
            System.out.println(n);
        }
    }
}

ðŸ‘‰ Salida:

Ana
Luis
Ana


ðŸ”¹ Ejemplo con Set
Set<Integer> numeros = new HashSet<>();
numeros.add(10);
numeros.add(20);
numeros.add(10); // ignorado, no se permiten duplicados

System.out.println(numeros); 


ðŸ”¹ Ejemplo con Map
Map<String, Integer> edades = new HashMap<>();
edades.put("Juan", 20);
edades.put("Ana", 25);

System.out.println(edades.get("Ana")); // 25




ðŸ”¹ Resumen 

List â†’ ordenada, permite duplicados.

Set â†’ no ordenada, sin duplicados.

Queue/Deque â†’ manejo de colas.

Map â†’ clave-valor (no extiende Collection).

Todas permiten recorrer elementos con for-each o Iterator.
