Sobreescritura en Java (Overriding)

La sobreescritura de m√©todos consiste en redefinir un m√©todo heredado de una superclase en una subclase, manteniendo la misma firma (nombre, par√°metros y tipo de retorno compatible).

Permite cambiar o extender el comportamiento de un m√©todo existente.

üîπ Reglas de la sobreescritura

El m√©todo debe tener el mismo nombre.

Debe tener los mismos par√°metros (lista id√©ntica).

El tipo de retorno debe ser el mismo o un subtipo (covariante).

El modificador de acceso no puede ser m√°s restrictivo.

Ejemplo: si es public en la superclase, debe seguir siendo public.

No se pueden sobrescribir m√©todos static, final o private.

Se puede usar la anotaci√≥n @Override (recomendado) para validar en compilaci√≥n.

üîπ Ejemplo
class Animal {
    void hacerSonido() {
        System.out.println("Sonido gen√©rico");
    }
}

class Perro extends Animal {
    @Override
    void hacerSonido() {
        System.out.println("Guau guau!");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal a = new Perro();
        a.hacerSonido();  // "Guau guau!"
    }
}


üëâ Aqu√≠, Perro sobrescribe el m√©todo hacerSonido de Animal.

üîπ Diferencia con Sobrecarga (Overloading)

Sobrecarga: mismo nombre de m√©todo pero par√°metros diferentes (dentro de la misma clase).

Sobreescritura: redefinir un m√©todo heredado, con la misma firma, en una subclase.

‚úÖ Resumen 	
La sobreescritura (overriding) en Java permite que una subclase cambie el comportamiento de un m√©todo definido en la superclase, manteniendo la misma firma. Se usa para implementar polimorfismo din√°mico.

