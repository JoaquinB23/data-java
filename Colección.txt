ColecciÃ³n 

ðŸ”¹ Â¿QuÃ© es una colecciÃ³n?

En Java, una colecciÃ³n es un objeto que agrupa mÃºltiples elementos en una sola unidad.
Sirve para almacenar, manipular y acceder a datos de forma mÃ¡s flexible que los arrays, porque:

Se pueden redimensionar dinÃ¡micamente.

Tienen mÃ©todos incorporados para agregar, eliminar, buscar, ordenar, etc.

Todas las colecciones pertenecen al Framework de Colecciones de Java (Java Collections Framework â€“ JCF).

ðŸ”¹ Interfaces principales del Framework

Las colecciones se basan en interfaces, cada una con caracterÃ­sticas diferentes:

Collection<E> â†’ interfaz raÃ­z de la mayorÃ­a de colecciones.

List<E> â†’ lista ordenada, permite elementos duplicados.

Implementaciones: ArrayList, LinkedList, Vector.

Set<E> â†’ conjunto, no permite duplicados.

Implementaciones: HashSet, LinkedHashSet, TreeSet.

Queue<E> â†’ estructura FIFO (primero en entrar, primero en salir).

Implementaciones: PriorityQueue, ArrayDeque.

Map<K,V> (no hereda de Collection) â†’ almacena pares clave-valor.

Implementaciones: HashMap, LinkedHashMap, TreeMap, Hashtable.

ðŸ”¹ Ejemplos bÃ¡sicos
1. Lista (List)
import java.util.*;

public class EjemploList {
    public static void main(String[] args) {
        List<String> lista = new ArrayList<>();
        lista.add("Juan");
        lista.add("Ana");
        lista.add("Pedro");

        System.out.println(lista); // [Juan, Ana, Pedro]
        System.out.println(lista.get(1)); // Ana
    }
}

2. Conjunto (Set)
import java.util.*;

public class EjemploSet {
    public static void main(String[] args) {
        Set<String> set = new HashSet<>();
        set.add("Rojo");
        set.add("Azul");
        set.add("Rojo"); // duplicado, no se agrega

        System.out.println(set); // [Rojo, Azul]
    }
}

3. Mapa (Map)
import java.util.*;

public class EjemploMap {
    public static void main(String[] args) {
        Map<Integer, String> mapa = new HashMap<>();
        mapa.put(1, "Argentina");
        mapa.put(2, "Brasil");
        mapa.put(3, "Chile");

        System.out.println(mapa.get(2)); // Brasil
        System.out.println(mapa); // {1=Argentina, 2=Brasil, 3=Chile}
    }
}

ðŸ”¹ Ventajas de usar colecciones

âœ… Crecen dinÃ¡micamente (a diferencia de los arrays).
âœ… MÃ©todos ya implementados para manejo de datos.
âœ… Estructuras especializadas (listas, colas, pilas, mapas).
âœ… MÃ¡s legibles y fÃ¡ciles de mantener.